diff --git a/Doc/Zsh/mod_db_gdbm.yo b/Doc/Zsh/mod_db_gdbm.yo
index 699e9ab..866d9e9 100644
--- a/Doc/Zsh/mod_db_gdbm.yo
+++ b/Doc/Zsh/mod_db_gdbm.yo
@@ -2,17 +2,19 @@ COMMENT(!MOD!zsh/db/gdbm
 Builtins for managing associative array parameters tied to GDBM databases.
 !MOD!)
 The tt(zsh/db/gdbm) module is used to create "tied" associative arrays
-that interface to database files.  If the GDBM interface is not available,
-the builtins defined by this module will report an error.  This module is
-also intended as a prototype for creating additional database interfaces,
-so the tt(ztie) builtin may move to a more generic module in the future.
+that interface to GDBM database files. This module doesn't itself provide
+tt(ztie), tt(zuntie), tt(ztaddress), tt(ztclear) builtins, they are in
+tt(zsh/db) frontend module, and tt(zsh/db/gdbm) provides backend
+implementation of GDBM database. If the two modules are properly loaded,
+then tt(zdb_backends) associative array contains key "db/gdbm" with value
+"loaded".
 
-The builtins in this module are:
+Builtins provided by tt(zsh/db) module, with tt(zsh/db/gdbm) as backend, are:
 
 startitem()
 findex(ztie)
 cindex(database tied array, creating)
-item(tt(ztie -d db/gdbm -f) var(filename) [ tt(-r) ] var(arrayname))(
+item(tt(ztie -d db/gdbm -f) var(filename) [ tt(-r) ] [ tt(-z) ] var(arrayname))(
 Open the GDBM database identified by var(filename) and, if successful,
 create the associative array var(arrayname) linked to the file.  To create
 a local tied array, the parameter must first be declared, so commands
@@ -25,7 +27,10 @@ The tt(-r) option opens the database file for reading only, creating a
 parameter with the readonly attribute.  Without this option, using
 `tt(ztie)' on a file for which the user does not have write permission is
 an error.  If writable, the database is opened synchronously so fields
-changed in var(arrayname) are immediately written to var(filename).
+changed in var(arrayname) are immediately written to var(filename). The
+tt(-z) option means zero-cache binding, i.e. reads of var(arrayname)
+always trigger database communication, otherwise they are cached (see
+tt(ztclear) builtin).
 
 Changes to the file modes var(filename) after it has been opened do not
 alter the state of var(arrayname), but `tt(typeset -r) var(arrayname)'
@@ -43,20 +48,28 @@ local scope (function) ends.  Note that a readonly parameter may not be
 explicitly unset, so the only way to unset a global parameter created with
 `tt(ztie -r)' is to use `tt(zuntie -u)'.
 )
-findex(zgdbmpath)
+findex(ztaddress)
 cindex(database file path, reading)
-item(tt(zgdbmpath) var(parametername))(
+item(tt(ztaddress) var(parametername))(
 Put path to database file assigned to var(parametername) into tt(REPLY)
-scalar.
+scalar (in case of GDBM, the "address" to database is a file path).
 )
+findex(ztclear)
+cindex(database read cache, clearing)
+item(tt(ztclear) var(parametername) var(keyname))(
+If parameter is tied without tt(-z) option, then reads are cached. The
+tt(ztclear) builtin can be used to clear read-cache of given key in
+given tied-parameter, once.
+)
+enditem()
+
+Array provided by tt(zsh/db/gdbm) itself:
+
+startitem()
 findex(zgdbm_tied)
 cindex(database tied arrays, enumerating)
 item(tt(zgdbm_tied))(
 Array holding names of all tied parameters.
 )
-enditem()
 
-The fields of an associative array tied to GDBM are neither cached nor
-otherwise stored in memory, they are read from or written to the database
-on each reference.  Thus, for example, the values in a readonly array may
-be changed by a second writer of the same database file.
+enditem()
