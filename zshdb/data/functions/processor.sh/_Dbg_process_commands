_Dbg_continue_rc=-1
_Dbg_write_journal_eval "_Dbg_step_ignore=-1"
_Dbg_hi_last_stop=-1

typeset -l key
for hook in ${_Dbg_cmdloop_hooks[@]} ; do
    ${hook}
done
while (( ${#_Dbg_fd[@]} > 0 )) ; do

    _Dbg_fdi=${_Dbg_fd[-1]}
    typeset _Dbg_greater=''
    typeset _Dbg_less=''
    typeset result 1>/dev/null

    if _Dbg_copies '>' $_Dbg_DEBUGGER_LEVEL ; then
 _Dbg_greater=$result
 _Dbg_copies '<' $_Dbg_DEBUGGER_LEVEL
    	  _Dbg_less=$result
    fi

    if _Dbg_copies ')' $ZSH_SUBSHELL ; then
 _Dbg_greater="${result}${_Dbg_greater}"
 _Dbg_less="${_Dbg_less}${result//)/(}"
    fi
    if [[ -n $_Dbg_set_highlight ]] ; then
     eval "_Dbg_prompt=\"${_Dbg_ansi_term_underline}$_Dbg_prompt_str${_Dbg_ansi_term_normal} \"" 2>/dev/null
    else
 eval "_Dbg_prompt=\"$_Dbg_prompt_str \"" 2>/dev/null
    fi
    _Dbg_preloop
    typeset line=''
    typeset -i rc
    while : ; do
 ((_Dbg_cmd_num++))
 if ((0 == _Dbg_in_vared)) && [[ -t $_Dbg_fdi ]]; then
     _Dbg_in_vared=1
     vared -e -h -p "$_Dbg_prompt" line <&${_Dbg_fdi} || break
     _Dbg_in_vared=0
 else
     if ((1 == _Dbg_in_vared)) ; then
  _Dbg_msg "Unable to echo characters in input below"
     fi
     if [[ -z ${_Dbg_cmdfile[-1]} ]] ; then
  read -u ${_Dbg_fdi} "?$_Dbg_prompt" line || break
     else
  read -u ${_Dbg_fdi}  line || break
     fi
 fi
        _Dbg_onecmd "$line"
        rc=$?
        _Dbg_postcmd
 ((_Dbg_continue_rc >= 0)) && return $_Dbg_continue_rc
 if [[ -n $line ]] && (( rc >= 0 )) ; then
     if [[ -z ${_Dbg_cmdfile[-1]} ]]; then
  _Dbg_write_journal "((\$ZSH_SUBSHELL < $ZSH_SUBSHELL)) && print -s -- \"$line\""
  print -s -- "$line"
     else
  print -s -- "$line" > /dev/null
     fi
     if ((_Dbg_history_save)) && [[ -n $_Dbg_histfile ]]; then
  fc -W ${_Dbg_histfile} ${_Dbg_history_length}
     fi
 fi

        (( rc > 0 )) && return $rc

 line=''
    done

    _Dbg_fd[-1]=()
    (( ${#_Dbg_fd[@]} <= 0 )) && break
done
_Dbg_msg ''
_Dbg_do_quit
